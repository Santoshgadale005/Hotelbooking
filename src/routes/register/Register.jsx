import { useState } from 'react';
import { Link } from 'react-router-dom';
import Toast from 'components/ux/toast/Toast';
import { REGISTRATION_MESSAGES } from 'utils/constants';
import { Formik, Form, Field } from 'formik';
import * as Yup from 'yup';

/**
 * Register Component
 * Renders a registration form that allows new users to create an account.
 * It captures user input for personal information and credentials, submitting these to a registration endpoint.
 * Upon successful registration, the user is notified and redirected to the login page.
 */
const Register = () => {
  const [toastMessage, setToastMessage] = useState('');
  const [toastType, setToastType] = useState('success');
  const [showToast, setShowToast] = useState(false);

  // Validation schema for the registration form
  const validationSchema = Yup.object().shape({
    username: Yup.string().required('Username is required'),
    password: Yup.string().required('Password is required'),
  });

  /**
   * Submits the registration form data to the server.
   * It performs an asynchronous operation to post the form data to a registration endpoint.
   * If registration is successful, a success message is displayed, and the user is redirected to the login page after a brief delay.
   * Otherwise, the user is informed of the failure.
   *
   * @param {Object} values - The form values generated by Formik.
   */
  const handleSubmit = async (values) => {
    try {
      const response = await fetch('http://localhost:8080/api/users/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          username: values.username,
          password: values.password,
        }),
      });

      const data = await response.json();

      if (response.ok && !data.errors) {
        setToastMessage(REGISTRATION_MESSAGES.SUCCESS);
        setShowToast(true);
        setTimeout(() => (window.location.href = '/login'), 2000); // Redirect to login page after 2 seconds
      } else {
        setToastType('error');
        setToastMessage(
          data.errors
            ? data.errors[0]
            : 'Registration failed. Please try again.'
        );
        setShowToast(true);
      }
    } catch (error) {
      setToastType('error');
      setToastMessage('Registration failed. Please try again.');
      setShowToast(true);
    }
  };

  return (
    <div className="register__form">
      <div className="container mx-auto p-4 flex justify-center min-h-[600px] items-center">
        <Formik
          initialValues={{
            username: '',
            password: '',
          }}
          validationSchema={validationSchema}
          onSubmit={handleSubmit}
        >
          {({ errors, touched }) => (
            <Form>
              <div className="w-full max-w-lg p-4 shadow-md md:p-10">
                <div className="mb-10 text-center">
                  <h2 className="text-3xl font-extrabold text-brand">
                    Join the Adventure!
                  </h2>
                  <p className="text-gray-500">
                    Create your account and start your journey with us
                  </p>
                </div>
                <div className="mb-6">
                  <Field
                    name="username"
                    placeholder="Username"
                    className={`${errors.username && touched.username ? 'border-red-500' : ''} border block w-full px-4 py-3 mb leading-tight text-gray-700 bg-gray-200 rounded appearance-none focus:outline-none focus:bg-white`}
                  />
                </div>
                <div className="mb-6">
                  <Field
                    name="password"
                    type="password"
                    placeholder="Password"
                    className={`${errors.password && touched.password ? 'border-red-500' : ''} border block w-full px-4 py-3 mb leading-tight text-gray-700 bg-gray-200 rounded appearance-none focus:outline-none focus:bg-white`}
                  />
                </div>
                <div className="flex items-center w-full my-3">
                  <button
                    type="submit"
                    className="w-full px-4 py-2 font-bold text-white rounded bg-brand hover:bg-blue-700 focus:outline-none focus:shadow-outline"
                  >
                    Register
                  </button>
                </div>
                <Link
                  to="/login"
                  className="inline-block w-full text-lg text-center text-gray-500 align-baseline hover:text-blue-800"
                >
                  Back to login
                </Link>
                {showToast && (
                  <Toast type={toastType} message={toastMessage} dismissError />
                )}
              </div>
            </Form>
          )}
        </Formik>
      </div>
    </div>
  );
};

export default Register;
